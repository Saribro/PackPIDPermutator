#include "PPPApp.h"
#include "PPPWindow.h"
#include "Cameras.h"

#include <memory>

#include "wx/button.h"
#include "wx/choice.h"
#include "wx/stattext.h"
#include "wx/msgdlg.h"
#include "wx/filedlg.h"
#include "wx/wfstream.h"
#include "wx/zipstrm.h"

#include "wx/xml/xml.h"

IMPLEMENT_APP(PackPIDPermutatorApp)

IMPLEMENT_CLASS(PackPIDPermutatorApp, wxApp)

PackPIDPermutatorApp::PackPIDPermutatorApp()
{
    Init();
}

void PackPIDPermutatorApp::Init() { // TODO
    // bind events (generated by PPPWindow)
    Bind(wxEVT_COMMAND_BUTTON_CLICKED,  &PackPIDPermutatorApp::OnButtonSelectClick, this, ID_BUTTON_SELECT);
    Bind(wxEVT_COMMAND_BUTTON_CLICKED,  &PackPIDPermutatorApp::OnButtonUpdateClick, this, ID_BUTTON_UPDATE);
    Bind(wxEVT_COMMAND_CHOICE_SELECTED, &PackPIDPermutatorApp::OnChoicePIDSelect,   this, ID_CHOICE_PID);
}

bool PackPIDPermutatorApp::OnInit()
{
    auto window = new PPPWindow(nullptr);
    SetTopWindow(window);
    window->Show(true);

    return true;
}

void PackPIDPermutatorApp::SelectPack()
{
    wxFileDialog xcaSelect(GetTopWindow(), _("Open Xeneth Calibration Archive"), "", "", _("XCA files") + "(*.xca)|*.xca", wxFD_OPEN|wxFD_FILE_MUST_EXIST);

    if(wxID_CANCEL == xcaSelect.ShowModal()) return;

    mPackLocation = xcaSelect.GetPath();

    auto topwindow = GetTopWindow();
    std::wstring status;

    if(!ReadPID(status)) {  // try to load pack, clear UI on failure
        dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_PACK_FOLDER))->SetLabel("");  // clear all textfields
        dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_PACK_NAME))->SetLabel("");

        dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_CAMERA_PID))->SetLabel("");
        dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_CAMERA_NAME))->SetLabel("");

        dynamic_cast<wxChoice *>(topwindow->FindWindowById(ID_CHOICE_PID))->Disable();          // disable 'Update' functionality
        dynamic_cast<wxButton *>(topwindow->FindWindowById(ID_BUTTON_UPDATE))->Disable();

        wxMessageBox(_("Failed to open pack:") + "\n\n\t" + status, _("Error"), wxOK | wxCENTRE | wxICON_ERROR);    // show error message
    }

    dynamic_cast<wxChoice *>(topwindow->FindWindowById(ID_CHOICE_PID))->SetSelection(-1);       // clear 'Update' fields
    dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_NAME))->SetLabel("");

    GetTopWindow()->Fit();
}

void PackPIDPermutatorApp::UpdatePack()
{
    std::wstring status;

    if(WritePID(status)) {      // try to write new PID
        if(!ReadPID(status)) {  // try to reload altered pack on success
            wxMessageBox(_("Failed to reload pack:") + "\n\n\t" + status, _("Error"), wxOK | wxCENTRE | wxICON_ERROR);  // show error message on failure
        }
    } else {
        wxMessageBox(_("Failed to update pack:") + "\n\n\t" + status, _("Error"), wxOK | wxCENTRE | wxICON_ERROR);      // show error message on failure
    }

    dynamic_cast<wxChoice *>(GetTopWindow()->FindWindowById(ID_CHOICE_PID))->SetSelection(-1);                          // clear 'Update' fields
    dynamic_cast<wxStaticText *>(GetTopWindow()->FindWindowById(ID_NAME))->SetLabel("");

    GetTopWindow()->Fit();
}

void PackPIDPermutatorApp::SetNameForPID(wxString const & PID)
{
    dynamic_cast<wxStaticText *>(GetTopWindow()->FindWindowById(ID_NAME))->SetLabel(cameras.find(PID.wc_str())->second);
    GetTopWindow()->Fit();
}

bool PackPIDPermutatorApp::ReadPID(std::wstring & status)
{
    if(!mPackLocation.Exists()) {               // error out if pack location is invalid
        mPackLocation.Clear();
        status = _("Invalid pack location.");
        return false;
    }

    wxFileInputStream filestream(mPackLocation.GetFullPath());  // set up for zip reading
    wxZipInputStream  zipstream(filestream);

    std::unique_ptr<wxZipEntry> entry;

    while(entry.reset(zipstream.GetNextEntry()), (nullptr != entry.get() && L"camerapack.xcf" != entry->GetName()));    // search for 'camerapack.xcf'

    if(nullptr == entry.get()) {                // error out if 'camerapack.xcf' not found
        mPackLocation.Clear();
        status = _("Could not find a settings file in the selected pack.");
        return false;
    }

    wxXmlDocument xcffile(zipstream);
    
    std::wstring PID = xcffile.GetRoot()->GetAttribute("productid");    // get 'productid' from xcf

    if(L"" == PID) {                            // error out if 'productid' not found
        mPackLocation.Clear();
        status = _("Could not find a product id in the selected pack.");
        return false;
    }

    if(cameras.end() == cameras.find(PID)) {    // error out if detected 'productid' is unknown
        mPackLocation.Clear();
        status = _("Pack with an unknown PID selected: ") + PID;
        return false;
    }

    auto topwindow = GetTopWindow();

    dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_PACK_FOLDER))->SetLabel(mPackLocation.GetPath());     // write pack data to textfields
    dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_PACK_NAME))->SetLabel(mPackLocation.GetFullName());

    dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_CAMERA_PID))->SetLabel(PID);                          // write pack data to textfields
    dynamic_cast<wxStaticText *>(topwindow->FindWindowById(ID_CAMERA_NAME))->SetLabel(cameras.find(PID)->second);

    dynamic_cast<wxChoice *>(topwindow->FindWindowById(ID_CHOICE_PID))->Enable();                                   // enable 'Update' functionality
    dynamic_cast<wxButton *>(topwindow->FindWindowById(ID_BUTTON_UPDATE))->Enable();

    status = _("Success.");
    return true;
}

bool PackPIDPermutatorApp::WritePID(std::wstring & status)
{
    auto PID = dynamic_cast<wxChoice *>(GetTopWindow()->FindWindowById(ID_CHOICE_PID))->GetStringSelection();   // get the requested new 'productid'

    if(PID.empty()) {               // error out if no 'productid' selected
        status = _("No PID selected.");
        return false;
    }

    if(!mPackLocation.Exists()) {   // error out if pack location is invalid
        status = _("Invalid pack location.");
        return false;
    }

    const std::wstring xcfname(L"camerapack.xcf");

    std::unique_ptr<wxZipEntry> entry;  // set up for zip reading

    auto fileinstream = std::make_unique<wxFileInputStream>(mPackLocation.GetFullPath());
    wxTempFileOutputStream fileoutstream(mPackLocation.GetFullPath());

    wxZipInputStream  zipinstream(*fileinstream);
    wxZipOutputStream zipoutstream(fileoutstream);

    zipoutstream.CopyArchiveMetaData(zipinstream);

    while(entry.reset(zipinstream.GetNextEntry()), nullptr != entry.get()) {    // go through all entries in the zip
        if(xcfname != entry->GetName()) {
            zipoutstream.CopyEntry(entry.release(), zipinstream);   // just copy the entries we don't need to change
        } else {
            wxXmlDocument xcf(zipinstream);         // set up for xcf XML reading
            auto node = xcf.GetRoot();

            node->DeleteAttribute("productid");     // alter 'productid' by deleting and recreating it
            node->AddAttribute("productid", PID);

            auto stamp = entry->GetDateTime();          // retain xcf timestamp
            zipoutstream.PutNextEntry(xcfname, stamp);
            xcf.Save(zipoutstream);
        }
    }

    fileinstream.reset();   // close input stream before output stream to allow for file replacement

    if(!(zipinstream.Eof() && zipoutstream.Close() && fileoutstream.Commit())) {    // error out on failure to close/write
        status = _("Problem saving the new PID.");
        return false;
    }

    status = _("Success.");
    return true;
}
